// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/gardener/controller-manager-library/pkg/apis/gardenextensions/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DNSLister helps list DNSs.
type DNSLister interface {
	// List lists all DNSs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DNS, err error)
	// DNSs returns an object that can list and get DNSs.
	DNSs(namespace string) DNSNamespaceLister
	DNSListerExpansion
}

// dNSLister implements the DNSLister interface.
type dNSLister struct {
	indexer cache.Indexer
}

// NewDNSLister returns a new DNSLister.
func NewDNSLister(indexer cache.Indexer) DNSLister {
	return &dNSLister{indexer: indexer}
}

// List lists all DNSs in the indexer.
func (s *dNSLister) List(selector labels.Selector) (ret []*v1alpha1.DNS, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DNS))
	})
	return ret, err
}

// DNSs returns an object that can list and get DNSs.
func (s *dNSLister) DNSs(namespace string) DNSNamespaceLister {
	return dNSNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DNSNamespaceLister helps list and get DNSs.
type DNSNamespaceLister interface {
	// List lists all DNSs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DNS, err error)
	// Data retrieves the DNS from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DNS, error)
	DNSNamespaceListerExpansion
}

// dNSNamespaceLister implements the DNSNamespaceLister
// interface.
type dNSNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DNSs in the indexer for a given namespace.
func (s dNSNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DNS, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DNS))
	})
	return ret, err
}

// Data retrieves the DNS from the indexer for a given namespace and name.
func (s dNSNamespaceLister) Get(name string) (*v1alpha1.DNS, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dns"), name)
	}
	return obj.(*v1alpha1.DNS), nil
}
