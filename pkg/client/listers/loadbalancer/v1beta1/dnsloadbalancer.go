/*
Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/gardener/dnslb-controller-manager/pkg/apis/loadbalancer/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DNSLoadBalancerLister helps list DNSLoadBalancers.
type DNSLoadBalancerLister interface {
	// List lists all DNSLoadBalancers in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.DNSLoadBalancer, err error)
	// DNSLoadBalancers returns an object that can list and get DNSLoadBalancers.
	DNSLoadBalancers(namespace string) DNSLoadBalancerNamespaceLister
	DNSLoadBalancerListerExpansion
}

// dNSLoadBalancerLister implements the DNSLoadBalancerLister interface.
type dNSLoadBalancerLister struct {
	indexer cache.Indexer
}

// NewDNSLoadBalancerLister returns a new DNSLoadBalancerLister.
func NewDNSLoadBalancerLister(indexer cache.Indexer) DNSLoadBalancerLister {
	return &dNSLoadBalancerLister{indexer: indexer}
}

// List lists all DNSLoadBalancers in the indexer.
func (s *dNSLoadBalancerLister) List(selector labels.Selector) (ret []*v1beta1.DNSLoadBalancer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.DNSLoadBalancer))
	})
	return ret, err
}

// DNSLoadBalancers returns an object that can list and get DNSLoadBalancers.
func (s *dNSLoadBalancerLister) DNSLoadBalancers(namespace string) DNSLoadBalancerNamespaceLister {
	return dNSLoadBalancerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DNSLoadBalancerNamespaceLister helps list and get DNSLoadBalancers.
type DNSLoadBalancerNamespaceLister interface {
	// List lists all DNSLoadBalancers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.DNSLoadBalancer, err error)
	// Get retrieves the DNSLoadBalancer from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.DNSLoadBalancer, error)
	DNSLoadBalancerNamespaceListerExpansion
}

// dNSLoadBalancerNamespaceLister implements the DNSLoadBalancerNamespaceLister
// interface.
type dNSLoadBalancerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DNSLoadBalancers in the indexer for a given namespace.
func (s dNSLoadBalancerNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.DNSLoadBalancer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.DNSLoadBalancer))
	})
	return ret, err
}

// Get retrieves the DNSLoadBalancer from the indexer for a given namespace and name.
func (s dNSLoadBalancerNamespaceLister) Get(name string) (*v1beta1.DNSLoadBalancer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("dnsloadbalancer"), name)
	}
	return obj.(*v1beta1.DNSLoadBalancer), nil
}
