/*
Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/gardener/dnslb-controller-manager/pkg/apis/loadbalancer/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DNSLoadBalancerEndpointLister helps list DNSLoadBalancerEndpoints.
type DNSLoadBalancerEndpointLister interface {
	// List lists all DNSLoadBalancerEndpoints in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.DNSLoadBalancerEndpoint, err error)
	// DNSLoadBalancerEndpoints returns an object that can list and get DNSLoadBalancerEndpoints.
	DNSLoadBalancerEndpoints(namespace string) DNSLoadBalancerEndpointNamespaceLister
	DNSLoadBalancerEndpointListerExpansion
}

// dNSLoadBalancerEndpointLister implements the DNSLoadBalancerEndpointLister interface.
type dNSLoadBalancerEndpointLister struct {
	indexer cache.Indexer
}

// NewDNSLoadBalancerEndpointLister returns a new DNSLoadBalancerEndpointLister.
func NewDNSLoadBalancerEndpointLister(indexer cache.Indexer) DNSLoadBalancerEndpointLister {
	return &dNSLoadBalancerEndpointLister{indexer: indexer}
}

// List lists all DNSLoadBalancerEndpoints in the indexer.
func (s *dNSLoadBalancerEndpointLister) List(selector labels.Selector) (ret []*v1beta1.DNSLoadBalancerEndpoint, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.DNSLoadBalancerEndpoint))
	})
	return ret, err
}

// DNSLoadBalancerEndpoints returns an object that can list and get DNSLoadBalancerEndpoints.
func (s *dNSLoadBalancerEndpointLister) DNSLoadBalancerEndpoints(namespace string) DNSLoadBalancerEndpointNamespaceLister {
	return dNSLoadBalancerEndpointNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DNSLoadBalancerEndpointNamespaceLister helps list and get DNSLoadBalancerEndpoints.
type DNSLoadBalancerEndpointNamespaceLister interface {
	// List lists all DNSLoadBalancerEndpoints in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.DNSLoadBalancerEndpoint, err error)
	// Get retrieves the DNSLoadBalancerEndpoint from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.DNSLoadBalancerEndpoint, error)
	DNSLoadBalancerEndpointNamespaceListerExpansion
}

// dNSLoadBalancerEndpointNamespaceLister implements the DNSLoadBalancerEndpointNamespaceLister
// interface.
type dNSLoadBalancerEndpointNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DNSLoadBalancerEndpoints in the indexer for a given namespace.
func (s dNSLoadBalancerEndpointNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.DNSLoadBalancerEndpoint, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.DNSLoadBalancerEndpoint))
	})
	return ret, err
}

// Get retrieves the DNSLoadBalancerEndpoint from the indexer for a given namespace and name.
func (s dNSLoadBalancerEndpointNamespaceLister) Get(name string) (*v1beta1.DNSLoadBalancerEndpoint, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("dnsloadbalancerendpoint"), name)
	}
	return obj.(*v1beta1.DNSLoadBalancerEndpoint), nil
}
